/*
void BinNode::traverse_info()
{
	int line_pos_temp_pre = -2;
	int line_pos_temp_post = -1;
	int attr_num = 0;
	vector<string> attrs;

	for (size_t i = 0; i < this->original_info.length(); i++) {
		if (i < this->original_info.length() - 2 && this->original_info[i + 1] == ' ' && this->original_info[i] == ' ') continue;
		if (attr_num == 3) {
			if (this->original_info[i] == ']') attr_num++;
			else continue;
		} 
		if (this->original_info[i] == ' ')
		{
			if (line_pos_temp_pre == -2 && line_pos_temp_post == -1) line_pos_temp_pre = i + 1;
			else {
				line_pos_temp_post = i;
				attrs.push_back(this->original_info.substr(line_pos_temp_pre + 1, line_pos_temp_post - line_pos_temp_pre));
				attr_num++;
				line_pos_temp_pre = i;
				line_pos_temp_post = -1;
			}
		} 
	}

	for (string s : attrs)
		cout << s << endl;
}

*/
/*
void BinNode::traverse_info()
{
	int line_pos_temp_pre = -2;
	int line_pos_temp_post = -1;
	vector<string> attrs;
	bool inParentheses = false;
	for (size_t i = 0; i < this->original_info.length(); i++) 
	{
		char* current = &this->original_info[i];
		if (*current != ' ' && *current != '[' && *current != ']') continue;
		else {
			if (*current == '[') 
			{
				line_pos_temp_post == i;
				inParentheses = true;
			}
			else if (*current == ']')
			{
				line_pos_temp_post = i;
				inParentheses = false;
			}
			else if (*current == ' ' &&  inParentheses == false) {
				if (*current + 1 == ' ') continue;
				else if (line_pos_temp_pre != -2) line_pos_temp_post = i - 1;
				else line_pos_temp_pre = i + 1;
			}
			if (line_pos_temp_pre != -2 && line_pos_temp_post != -1)
			{
				attrs.push_back(this->original_info.substr(line_pos_temp_pre, line_pos_temp_post - line_pos_temp_pre + 1));
				line_pos_temp_pre = i + 1;
				line_pos_temp_post = -1;
			}
		}
	}

	for (string s : attrs)
		cout << s << endl;
}
*/